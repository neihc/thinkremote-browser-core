// import fullscreenTexturedQuadWGSL from './blur/fullscreenTexturedQuad.wgsl';
// import blurWGSL from './blur/blur.wgsl';
// import { MediaStreamSink } from '../sink';

// export class WebGPUCanvas implements MediaStreamSink{ // eslint-disable-line no-unused-vars
// 	device: GPUDevice
// 	context: GPUCanvasContext
// 	adapter: GPUAdapter
// 	canvas: HTMLCanvasElement

// 	mediastream: MediaStream
// 	srcWidth: number
// 	srcHeight: number

// 	fullscreenQuadPipeline: GPURenderPipeline
// 	showResultBindGroup: GPUBindGroup
// 	blurPipeline: GPUComputePipeline

// 	computeBindGroup1: GPUBindGroup
// 	computeBindGroup2: GPUBindGroup
// 	computeBindGroup3: GPUBindGroup
// 	computeConstants:  GPUBindGroup
// 	computeBindGroup0: GPUBindGroup
	
// 	blurParamsBuffer: GPUBuffer
// 	vertexBuffer_: GPUBuffer

// 	buffer0: GPUBuffer
// 	buffer1: GPUBuffer

// 	cubeTexture: GPUTexture	
// 	textures: Array<GPUTexture>


// 	constructor(inputCanvas: HTMLCanvasElement) {
// 		this.canvas = inputCanvas;
// 	}

// 	async init() : Promise<Error | null>{
// 		console.log('[WebGPUTransform] Initializing WebGPU.');

// 		this.context = this.canvas.getContext('webgpu');
// 		if (!this.context) {
// 			const errorMessage = 'Your browser does not support the WebGPU API.' +
// 								 'Please see the note at the bottom of the page.';
// 			return new Error(errorMessage);
// 		}

// 		this.adapter = await navigator.gpu.requestAdapter();
// 		this.device  = await this.adapter.requestDevice();
// 		if (!this.device) {
// 			console.log('[WebGPUTransform] requestDevice failed.');
// 			return;
// 		}




// 		{
// 			const devicePixelRatio = window.devicePixelRatio || 1;
// 			const presentationSize = [
// 				this.canvas.clientWidth * devicePixelRatio,
// 				this.canvas.clientHeight * devicePixelRatio,
// 			];


// 			const presentationFormat = navigator.gpu.getPreferredCanvasFormat();
// 			this.context.configure({
// 				device: this.device,
// 				size: presentationSize,
// 				format: presentationFormat,
// 				alphaMode: 'opaque',
// 			})

// 			this.fullscreenQuadPipeline = this.device.createRenderPipeline({
// 				layout: 'auto',
// 				vertex: {
// 				module: this.device.createShaderModule({
// 					code: fullscreenTexturedQuadWGSL,
// 				}),
// 				entryPoint: 'vert_main',
// 				},
// 				fragment: {
// 				module: this.device.createShaderModule({
// 					code: fullscreenTexturedQuadWGSL,
// 				}),
// 				entryPoint: 'frag_main',
// 				targets: [
// 					{
// 					format: presentationFormat,
// 					},
// 				],
// 				},
// 				primitive: {
// 				topology: 'triangle-list',
// 				},
// 			});
// 		}

// 		const sampler = this.device.createSampler({
// 			magFilter: 'linear',
// 			minFilter: 'linear',
// 		});
		

// 		{
// 			this.textures = [0, 1].map(() => {
// 				return this.device.createTexture({
// 				size: {
// 					width: this.srcWidth,
// 					height: this.srcHeight,
// 				},
// 				format: 'rgba8unorm',
// 				usage:
// 					GPUTextureUsage.COPY_DST |
// 					GPUTextureUsage.STORAGE_BINDING |
// 					GPUTextureUsage.TEXTURE_BINDING,
// 				});
// 			});
// 			this.showResultBindGroup = this.device.createBindGroup({
// 				layout: this.fullscreenQuadPipeline.getBindGroupLayout(0),
// 				entries: [
// 					{
// 						binding: 0,
// 						resource: sampler,
// 					},
// 					{
// 						binding: 1,
// 						resource: this.textures[1].createView(),
// 					},
// 				],
// 			});
// 		}

// 		this.blurPipeline = this.device.createComputePipeline({
// 			layout: 'auto',
// 			compute: {
// 				module: this.device.createShaderModule({
// 					code: blurWGSL,
// 				}),
// 				entryPoint: 'main',
// 			},
// 		});









// 		{
// 			{
// 				const buffer = this.device.createBuffer({
// 					size: 4,
// 					mappedAtCreation: true,
// 					usage: GPUBufferUsage.UNIFORM,
// 				});

// 				new Uint32Array(buffer.getMappedRange())[0] = 0;
// 				buffer.unmap();
// 				this.buffer0 = buffer;
// 			};

// 			{
// 				const buffer = this.device.createBuffer({
// 					size: 4,
// 					mappedAtCreation: true,
// 					usage: GPUBufferUsage.UNIFORM,
// 				});

// 				new Uint32Array(buffer.getMappedRange())[0] = 1;
// 				buffer.unmap();
// 				this.buffer1 = buffer;
// 			}

// 			this.computeBindGroup1 = this.device.createBindGroup({
// 				layout: this.blurPipeline.getBindGroupLayout(1),
// 				entries: [
// 				{
// 					binding: 1,
// 					resource: this.textures[0].createView(),
// 				},
// 				{
// 					binding: 2,
// 					resource: this.textures[1].createView(),
// 				},
// 				{
// 					binding: 3,
// 					resource: {
// 					buffer: this.buffer1,
// 					},
// 				},
// 				],
// 			});

// 			this.computeBindGroup2 = this.device.createBindGroup({
// 				layout: this.blurPipeline.getBindGroupLayout(1),
// 				entries: [
// 				{
// 					binding: 1,
// 					resource: this.textures[1].createView(),
// 				},
// 				{
// 					binding: 2,
// 					resource: this.textures[0].createView(),
// 				},
// 				{
// 					binding: 3,
// 					resource: {
// 					buffer: this.buffer0,
// 					},
// 				},
// 				],
// 			});
// 		}





// 		this.blurParamsBuffer = this.device.createBuffer({
// 			size: 8,
// 			usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,
// 		});

// 		this.computeConstants = this.device.createBindGroup({
// 			layout: this.blurPipeline.getBindGroupLayout(0),
// 			entries: [
// 			{
// 				binding: 0,
// 				resource: sampler,
// 			},
// 			{
// 				binding: 1,
// 				resource: {
// 				buffer: this.blurParamsBuffer,
// 				},
// 			},
// 			],
// 		});	


// 		this.cubeTexture = this.device.createTexture({
// 			size: [this.srcWidth, this.srcHeight, 1],
// 			format: 'rgba8unorm',
// 			usage:
// 			GPUTextureUsage.TEXTURE_BINDING |
// 			GPUTextureUsage.COPY_DST |
// 			GPUTextureUsage.RENDER_ATTACHMENT,
// 		});

// 		this.computeBindGroup0 = this.device.createBindGroup({
// 			layout: this.blurPipeline.getBindGroupLayout(1),
// 			entries: [
// 			{
// 				binding: 1,
// 				resource: this.cubeTexture.createView(),
// 			},
// 			{
// 				binding: 2,
// 				resource: this.textures[0].createView(),
// 			},
// 			{
// 				binding: 3,
// 				resource: {
// 				buffer: this.buffer0,
// 				},
// 			},
// 			],
// 		});











// 	}

//     setMediaStream(stream: MediaStream) {
// 		this.mediastream = stream;

// 		let cap = this.mediastream.getVideoTracks()[0].getSettings()
// 		this.srcWidth = cap.width;
// 		this.srcHeight = cap.height;

// 	}



// 	private setFrameSize(bitmap: ImageBitmap) {
// 		this.srcHeight = bitmap.height;
// 		this.srcWidth = bitmap.width;
// 	}





// 	async process() {
// 		const processor = new MediaStreamTrackProcessor({track: this.mediastream.getVideoTracks()[0]});
// 		const videoSource = processor.readable.getReader()

// 		while (true) {
// 			let frame = await videoSource.read()
// 			while (!frame.done) { await new Promise(resolve => setTimeout(resolve, 1)) }

// 			let bitmap = await createImageBitmap(frame.value);

// 			this.device.queue.copyExternalImageToTexture(
// 				{ source : bitmap},
// 				{ texture: this.cubeTexture},
//     			[ this.srcWidth, this.srcHeight ]
// 			)

// 			await this.render()
// 		}
// 		videoSource.cancel();
// 	}

// 	private async render() {
// 		// Sample is no longer the active page.
// 		// if (!pageState.active) return;

// 		const commandEncoder = this.device.createCommandEncoder();

// 		const computePass = commandEncoder.beginComputePass();
// 		computePass.setPipeline(this.blurPipeline);
// 		computePass.setBindGroup(0, this.computeConstants);

// 		computePass.setBindGroup(1, this.computeBindGroup0);
// 		computePass.dispatchWorkgroups(
// 			Math.ceil(this.srcWidth / blockDim),
// 			Math.ceil(this.srcHeight / batch[1])
// 		);

// 		computePass.setBindGroup(1, this.computeBindGroup1);
// 		computePass.dispatchWorkgroups(
// 			Math.ceil(this.srcHeight / blockDim),
// 			Math.ceil(this.srcWidth / batch[1])
// 		);

// 		for (let i = 0; i < settings.iterations - 1; ++i) {
// 			computePass.setBindGroup(1, this.computeBindGroup2);
// 			computePass.dispatchWorkgroups(
// 				Math.ceil(this.srcWidth / blockDim),
// 				Math.ceil(this.srcHeight / batch[1])
// 			);

// 			computePass.setBindGroup(1, this.computeBindGroup1);
// 			computePass.dispatchWorkgroups(
// 				Math.ceil(this.srcHeight / blockDim),
// 				Math.ceil(this.srcWidth / batch[1])
// 			);
// 		}

// 		computePass.end();

// 		let descriptor = {
// 			colorAttachments: [{
// 				label: "",
// 				view: this.context.getCurrentTexture().createView(),
// 				clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },
// 				loadOp: 'clear',
// 				storeOp: 'store',
// 			}],
// 		} as GPURenderPassDescriptor;

// 		const passEncoder = commandEncoder.beginRenderPass(descriptor);
// 		passEncoder.setPipeline(this.fullscreenQuadPipeline);
// 		passEncoder.setBindGroup(0, this.showResultBindGroup);
// 		passEncoder.draw(6, 1, 0, 0);
// 		passEncoder.end();
// 		this.device.queue.submit([commandEncoder.finish()]);
// 	}




// 	destroy() {
// 		if (this.device) {
// 			// Currently being implemented.
// 			// await this.device_.destroy();
// 			this.device = null;
// 			this.blurParamsBuffer.destroy();
// 			console.log('[WebGPUTransform] Context destroyed.',);
// 		}
// 	}
// }
